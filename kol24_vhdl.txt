-- Code your design here
library IEEE;
use IEEE.std_logic_1164.all;

entity dff is
port(D: in std_logic;
	clk: in std_logic;
	Q: out std_logic);
end entity dff;

architecture dff_beh of dff is
signal q0: std_logic;
begin
process(clk)
begin
if(clk'event and clk = '1') then
	q0<=D;
end if;
end process;

Q<= q0;
end architecture dff_beh;
    
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bcd_jednocifreni is
    port (
        CLK    : in  std_logic;
        LOAD   : in  std_logic;
        DATA   : in  std_logic_vector(3 downto 0);
        COUNT  : out std_logic_vector(3 downto 0)
    );
end entity bcd_jednocifreni;

architecture bcd_jednocifreni_arch of bcd_jednocifreni is
    signal counter : unsigned(3 downto 0) := (others => '0');
begin
    process(CLK)
    begin
        if (clk'event and clk='1') then
            if LOAD = '1' then
                if DATA >= "1010" then
                    counter <= (others => '0');
                else
                    counter <= unsigned(DATA);
                end if;
            else
                if counter = 9 then
                    counter <= (others => '0');
                else
                    counter <= counter + 1;
                end if;
            end if;
        end if;
    end process;
    
    COUNT <= std_logic_vector(counter);
end architecture bcd_jednocifreni_arch;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;


entity kolo is 
	port(CLK    : in  std_logic;
        LOAD   : in  std_logic;
        DATA_IN   : in  std_logic_vector(3 downto 0);
        DATA_OUT  : out std_logic_vector(3 downto 0));
end entity kolo;

architecture kolo_arch of kolo is
signal d_out: std_logic_vector(3 downto 0);
signal q:std_logic;

begin

UUT1: Entity work.bcd_jednocifreni(bcd_jednocifreni_arch) port map(clk=> clk, LOAD => LOAD, DATA=> DATA_IN, COUNT=>d_out);

q<= d_out(3);
UUT2: Entity work.dff(dff_beh) port map(D=> d_out(3),clk => CLK,Q=>q);

d_out(3 downto 1) <= DATA_IN(3 downto 1);

DATA_OUT <= d_out;
end architecture kolo_arch;


library IEEE;
use IEEE.std_logic_1164.all;

entity tb_kolo is
end entity tb_kolo;

architecture behavior of tb_kolo is
    signal CLK      : std_logic := '0';
    signal LOAD     : std_logic := '0';
    signal DATA_IN  : std_logic_vector(3 downto 0) := (others => '0');
    signal DATA_OUT : std_logic_vector(3 downto 0);

    constant CLK_PERIOD : time := 10 ns;
begin
    uut: entity work.kolo
        port map (
            CLK      => CLK,
            LOAD     => LOAD,
            DATA_IN  => DATA_IN,
            DATA_OUT => DATA_OUT
        );

    clk_process : process
    begin
        CLK <= '0';
        wait for CLK_PERIOD / 2;
        CLK <= '1';
        wait for CLK_PERIOD / 2;
    end process;

    stim_proc: process
    begin
        LOAD <= '1';
        DATA_IN <= "0100";
        wait for CLK_PERIOD;
        LOAD <= '0';
        wait for CLK_PERIOD;

        wait for 5 * CLK_PERIOD;

        LOAD <= '1';
        DATA_IN <= "1010";
        wait for CLK_PERIOD;
        LOAD <= '0';
        wait for CLK_PERIOD;
        wait for 5 * CLK_PERIOD;
        wait;
    end process;
end architecture behavior;
