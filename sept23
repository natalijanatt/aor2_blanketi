library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity specijalni_brojac is
    generic(n: integer := 8);
    port (
        clk : in  std_logic;
        rst : in  std_logic;
        Q   : out std_logic_vector(n-1 downto 0)
    );
end entity specijalni_brojac;

architecture specijalni_brojac_arch of specijalni_brojac is
    signal current : std_logic_vector(n-1 downto 0) := (others => '0');
begin
    process(clk)
    variable max: std_logic_vector(n-1 downto 0) := (others => '1');
    begin
        if rising_edge(clk) then
            if rst = '1' then
                current <= (others => '0');
                current(n-1) <= '1';
            else
                if current = max then
                    current <= (others => '0');
                    current(n-1) <= '1';
                else
                    current <= current srl 1;
                    current(n-1) <= '1';
                end if;
            end if;
        end if;
    end process;
    
    Q <= current;
end architecture specijalni_brojac_arch;


library IEEE;
use IEEE.std_logic_1164.all;

entity tb_specijalni_brojac is
end entity tb_specijalni_brojac;

architecture behavior of tb_specijalni_brojac is
    signal clk : std_logic := '0';
    signal rst : std_logic := '0';
    signal Q   : std_logic_vector(7 downto 0);

    constant clk_period : time := 1 ns;
begin
    -- Instantiate the Unit Under Test (UUT)
    uut: entity work.specijalni_brojac
        generic map (
            n => 8
        )
        port map (
            clk => clk,
            rst => rst,
            Q   => Q
        );

    -- Clock process
    clk_process : process
    begin
        while True loop
            clk <= '0';
            wait for clk_period / 2;
            clk <= '1';
            wait for clk_period / 2;
        end loop;
    end process;

    -- Stimulus process
    stim_proc: process
    begin
        -- Initialize Inputs
        rst <= '1';
        wait for clk_period * 2;
        rst <= '0';

        -- Add stimulus here
        wait for clk_period * 20;

        -- Reset the counter
        rst <= '1';
        wait for clk_period * 2;
        rst <= '0';

        wait for clk_period * 20;

        -- End simulation
        wait;
    end process;
end architecture behavior;
