-- Code your design here
library IEEE;
use IEEE.std_logic_1164.all;

entity dff is
port(D: in std_logic;
	clk: in std_logic;
	Q: out std_logic);
end entity dff;

architecture dff_beh of dff is
signal q0: std_logic;
begin
process(clk)
begin
if(clk'event and clk = '1') then
	q0<=D;
end if;
end process;

Q<= q0;
end architecture dff_beh;
    
-- Code your testbench here
library IEEE;
use IEEE.std_logic_1164.all;

entity dff_tb is
end entity dff_tb;

architecture dff_tb_arch of dff_tb is
signal D, Q: std_logic;
signal clk: std_logic := '0';
begin
	clk<= not clk after 2ns;
	UUT: Entity work.dff(dff_beh)
    	port map(D=>D, Q=>Q, clk=>clk);
stimulus:process
begin

D<='0';
wait for 4 ns;
D<='1';
wait for 4 ns;
D<='0';
wait for 4 ns;
D<='1';
wait for 4 ns;
end process stimulus;
end architecture dff_tb_arch;